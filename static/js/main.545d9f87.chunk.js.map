{"version":3,"sources":["contexts/error-message.context.tsx","components/nav/nav.component.tsx","components/calculator/calculator.ts","components/calculator/display/display.component.tsx","components/calculator/button/button.component.tsx","components/calculator/controls/controls.component.tsx","components/calculator/calculator.component.tsx","components/calculator/calculator.utils.ts","assets/error-icon.svg","components/error-message/error-message.component.tsx","components/help/help.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ErrorMessageContext","createContext","isInvalidExpression","setIsInvalidExpression","errorMessage","setErrorMessage","useErrorMessageContext","useContext","ErrorMessageContextProvider","children","useState","invalidExpression","setInvalidExpression","Provider","value","Nav","setHelpModalOpen","helpLinkRef","useRef","className","href","ref","onClick","event","preventDefault","current","blur","SYNTAX_ERROR","UNMATCHED_PARENTHESIS_ERROR","filterInput","inputString","inputArray","currNum","periodCount","parensCount","i","length","char","push","includes","prevChar","isNaN","Number","operatorCount","j","calculate","calculatedNums","prevOperator","currentElement","subExpression","subExpressionResult","pop","res","reduce","totalSum","Math","round","EPSILON","Display","currDisplay","setDisplay","setDisplayFocused","type","onChange","displayValue","target","onFocus","onBlur","Button","name","display","handleClick","otherProps","valid","setValid","validateButton","buttonValue","filteredNextPossibleDisplay","lastCharacter","filteredCurrentDisplay","Array","isArray","onMouseEnter","onMouseLeave","Controls","props","map","Calculator","helpModalOpen","displayFocused","handleCalculate","useCallback","result","toString","handleKeyDown","keyValue","key","keyButtonValue","checkControls","checkParens","checkOperators","checkValidInputValue","prevDisplay","slice","useEffect","validatedDisplay","window","addEventListener","removeEventListener","_extends","Object","assign","arguments","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","d","SvgErrorIcon","_ref","svgRef","title","titleId","xmlns","height","viewBox","width","fill","id","ForwardRef","ErrorMessage","Help","isOpen","setIsOpen","closeModal","createPortal","document","getElementById","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.545d9f87.chunk.js","sourcesContent":["import { useState, createContext, useContext } from 'react';\n\ntype ErrorMessageContextProps = {\n  isInvalidExpression: boolean;\n  setIsInvalidExpression: React.Dispatch<React.SetStateAction<boolean>>;\n  errorMessage: string;\n  setErrorMessage: React.Dispatch<React.SetStateAction<string>>;\n};\n\nconst ErrorMessageContext = createContext<ErrorMessageContextProps>({\n  isInvalidExpression: false,\n  setIsInvalidExpression: () => {},\n  errorMessage: '',\n  setErrorMessage: () => {},\n});\n\n// Custom hook to access context values\n// Have one import 'useErrorMessageContext' instead of two imports:\n// - 'useContext and ErrorMessageContext'\nexport const useErrorMessageContext = () => useContext(ErrorMessageContext);\n\n// Wrapper component to provide context to childr components\nexport const ErrorMessageContextProvider = ({ children }: any) => {\n  const [invalidExpression, setInvalidExpression] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  return (\n    <ErrorMessageContext.Provider\n      value={{\n        isInvalidExpression: invalidExpression,\n        setIsInvalidExpression: setInvalidExpression,\n        errorMessage,\n        setErrorMessage,\n      }}\n    >\n      {children}\n    </ErrorMessageContext.Provider>\n  );\n};\n","import { useRef } from 'react';\n\nimport './nav.styles.scss';\n\ninterface NavProps {\n  setHelpModalOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const Nav = ({ setHelpModalOpen }: NavProps) => {\n  // Ref is used here to unfocus a link after clicking\n  // to allow keyboard controls like 'Enter'\n  const helpLinkRef = useRef<HTMLAnchorElement>(null);\n\n  const openHelpModal = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.preventDefault();\n\n    setHelpModalOpen(true);\n    helpLinkRef.current!.blur();\n  };\n\n  return (\n    <>\n      <div className=\"nav\">\n        <div className=\"title\">\n          <h1>calculator</h1>\n        </div>\n        <a href=\"/\" ref={helpLinkRef} onClick={openHelpModal}>\n          help\n        </a>\n      </div>\n    </>\n  );\n};\n","/**\n * Calculator algorithm/logic\n **/\n\nconst SYNTAX_ERROR = 'Syntax Error';\nconst INVALID_EXPRESSION_ERROR = 'Invalid Expression';\nconst UNMATCHED_PARENTHESIS_ERROR = 'Unmatched Parenthesis';\nconst EMPTY_PARENTHESIS_ERROR = 'Empty Parenthesis';\n\n// Explicitly define return type of filterInput function\nexport type FilteredInput =\n  | string[]\n  | typeof SYNTAX_ERROR\n  | typeof INVALID_EXPRESSION_ERROR\n  | typeof UNMATCHED_PARENTHESIS_ERROR\n  | typeof EMPTY_PARENTHESIS_ERROR;\n\n/**\n * Parse the input string before sending for main calculation\n * - Handles *most errors to minimize illegal calculations\n **/\nexport const filterInput = (inputString: string): FilteredInput => {\n  let inputArray = [];\n  let currNum = ''; // holds values for next number to be added into inputArray\n  let periodCount = 0;\n  let parensCount = 0;\n\n  // Iterate through every character of the string and handle each character one by one\n  for (let i = 0; i < inputString.length; ++i) {\n    const char = inputString[i];\n\n    // Ignore spaces\n    if (char === ' ') {\n      continue;\n    }\n\n    // If current character is a number character (digits and/or '.') start building\n    // currNum string in order to build the full integer/floating point number.\n    if ((char >= '0' && char <= '9') || char === '.') {\n      const prevChar = inputArray[inputArray.length - 1];\n\n      if (prevChar === ')') {\n        return SYNTAX_ERROR;\n      }\n\n      // Maintain a count of periods in currNum in order to prevent syntax errors with\n      // too many decimals.\n      if (char === '.') {\n        if (periodCount) {\n          return SYNTAX_ERROR;\n        } else {\n          periodCount++;\n        }\n      }\n\n      currNum += char;\n    }\n\n    // Handle all other non-number characters\n    else {\n      // If there is a value stored in currNum, check to make sure it is a valid number string\n      // and store it in the inputArray, then finally reset currNum to an empty string\n      // to start building the next number string.\n      if (currNum) {\n        inputArray.push(currNum);\n        currNum = '';\n        periodCount = 0;\n      }\n\n      // Handle parenthesis\n      if ('()'.includes(char)) {\n        // If current char is an opening parenthesis, check the last element in inputArray,\n        // if it is a number, return Syntax Error.\n        // Always increment parensCount\n        if (char === '(') {\n          const prevChar = inputArray[inputArray.length - 1];\n\n          if (!isNaN(Number(prevChar))) {\n            return SYNTAX_ERROR;\n          }\n\n          parensCount++;\n        } else if (char === ')') {\n          // If current char is a closing parenthesis, decrement parensCount.\n          parensCount--;\n\n          // If parensCount drops below zero, we have more closing parenthesis than opening.\n          if (parensCount < 0) {\n            return UNMATCHED_PARENTHESIS_ERROR;\n          }\n        }\n\n        inputArray.push(char);\n      }\n\n      // Handle all operators except subtraction\n      else if ('+*/'.includes(char)) {\n        const prevChar = inputArray[inputArray.length - 1];\n\n        // If inputArray is empty or the previous char is an opening parenthesis,\n        // return with Syntax Error\n        if (!inputArray.length || prevChar === '(') {\n          return SYNTAX_ERROR;\n        }\n\n        // If last elemeent in inputArray is not an operator or an opening parenthesis,\n        // push character into inputArray\n        else if (!'+-*/('.includes(prevChar)) {\n          inputArray.push(char);\n        }\n\n        // Handle all other cases with Syntax Error\n        else {\n          return SYNTAX_ERROR;\n        }\n      }\n\n      // Handle subtraction operator\n      else if (char === '-') {\n        // If inputArray is empty ('-' will be the first char) or the last element in inputArray\n        // is an opening parenthesis ('-' will the first char after an opening parenthesis),\n        // we can assume current '-' operator will function as a negative flag to a number.\n        if (\n          !inputArray.length ||\n          (inputArray.length && inputArray[inputArray.length - 1] === '(')\n        ) {\n          currNum += '-';\n        }\n\n        // Count, in reverse, the number of consecutive operators in inputArray that\n        // precede current '-' char.\n        else {\n          let operatorCount = 0;\n          let j = inputArray.length - 1;\n\n          // Since only two sequential operators are allowed, if operatorCount goes over 2,\n          // we can end the search early\n          while (\n            j >= 0 &&\n            '+-*/'.includes(inputArray[j]) &&\n            operatorCount < 3\n          ) {\n            operatorCount++;\n            j--;\n          }\n\n          // If preceding element is an operator, handle next number as a negative number\n          if (operatorCount === 1) {\n            currNum += '-';\n          }\n\n          // There are no previous operators, so we can append to inputArray as an operator\n          else if (operatorCount === 0) {\n            inputArray.push(char);\n          }\n\n          // Handle all other cases\n          else {\n            return SYNTAX_ERROR;\n          }\n        }\n      }\n\n      // Handle any other invalid characters\n      else {\n        return INVALID_EXPRESSION_ERROR;\n      }\n    }\n  }\n\n  // if parenthesis are not balanced, after iterating through entire string,\n  // return with an Unmatched Parenthesis Error.\n  if (parensCount) {\n    return UNMATCHED_PARENTHESIS_ERROR;\n  }\n\n  // If there is a value leftover in currNum, add it to inputArray\n  if (currNum) {\n    inputArray.push(currNum);\n  }\n\n  return inputArray;\n};\n\n/**\n * Perform calculation from returned value of filterInput function\n **/\nexport const calculate = (inputString: string): number | FilteredInput => {\n  const inputArray = filterInput(inputString);\n\n  // If filterInput function is not an Array, we know an error was returned.\n  if (typeof inputArray === 'string') {\n    return inputArray;\n  }\n\n  // Store current number and previous operator in variables,\n  // and all calculated numbers in a stack in order to handle operator precedence.\n  const calculatedNums: number[] = [];\n  let currNum = 0;\n  let prevOperator = '+';\n  let i = 0;\n\n  // If there is only a single element in the inputArray, it must be a number so we can\n  // return that number\n  if (inputArray.length === 1) {\n    return Number(inputArray[0]);\n  }\n\n  while (i < inputArray.length) {\n    let currentElement = inputArray[i];\n\n    // Handle numbers\n    // If the current element is an integer or its length is greater than 1, we can assume\n    // it is a number and update currNum to converted number type element.\n    if (\n      (currentElement >= '0' && currentElement <= '9') ||\n      currentElement.length > 1\n    ) {\n      currNum = Number(currentElement);\n    }\n\n    // Handle parenthesis by building a sub expression from within the parenthesis and\n    // call recursively to get evaluated subexpression\n    else if (currentElement === '(') {\n      let subExpression = '';\n      let parensCount = 1;\n\n      while (++i < inputArray.length && parensCount > 0) {\n        if (inputArray[i] === '(') {\n          parensCount++;\n        }\n\n        // if there is only one opening parenthesis, the subsequent closing parenthesis\n        // will balance the subexpression\n        else if (inputArray[i] === ')') {\n          if (parensCount === 1) {\n            break;\n          }\n\n          parensCount--;\n        }\n\n        subExpression += inputArray[i];\n      }\n\n      // Handles empty parenthesis '()'\n      if (!subExpression) {\n        return EMPTY_PARENTHESIS_ERROR;\n      }\n\n      const subExpressionResult = calculate(subExpression);\n\n      // If the evaluated sub expression is a number, update currNum to that value\n      if (typeof subExpressionResult === 'number') {\n        currNum = subExpressionResult;\n      }\n\n      // if the evaluated sub expression is not a number, it must have returned an error\n      else {\n        return subExpressionResult;\n      }\n\n      // update currentElement to element at current index\n      currentElement = inputArray[i];\n    }\n\n    // Handle operators based on prevOperator and currNum and/or last number from\n    // the calculatedNums stack\n    if ('+-*/'.includes(currentElement) || i === inputArray.length - 1) {\n      switch (prevOperator) {\n        // If prevOperator is '+', save currNum into stack for later evaluation\n        case '+':\n          calculatedNums.push(currNum);\n          break;\n        // If prevOperator is '-', save -currNum into stack for later evaluation\n        case '-':\n          calculatedNums.push(-currNum);\n          break;\n        // If operator is a '*' or '/', we can perform the operation based on currNum\n        // and last number from stack, then push that new value into the stack.\n        case '*':\n          calculatedNums.push(calculatedNums.pop()! * currNum);\n          break;\n        case '/':\n          calculatedNums.push(calculatedNums.pop()! / currNum);\n          break;\n      }\n\n      prevOperator = currentElement;\n      currNum = 0;\n    }\n\n    i++;\n  }\n\n  // The sum of all values in calculatedNums stack will give us the final result.\n  const res = calculatedNums.reduce((totalSum, currNum) => totalSum + currNum);\n\n  // Round the result to two (*for testing purposes - subject to change later)\n  return Math.round((res + Number.EPSILON) * 100) / 100;\n};\n","import { useErrorMessageContext } from '../../../contexts/error-message.context';\n\nimport './display.styles.scss';\n\ninterface DisplayProps {\n  currDisplay: string;\n  setDisplay: React.Dispatch<React.SetStateAction<string>>;\n  setDisplayFocused: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const Display = ({\n  currDisplay,\n  setDisplay,\n  setDisplayFocused,\n}: DisplayProps) => {\n  const { isInvalidExpression } = useErrorMessageContext();\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    let displayValue = event.target.value;\n\n    setDisplay(displayValue);\n  };\n\n  const handleFocus = () => {\n    setDisplayFocused(true);\n  };\n\n  const handleBlur = () => {\n    setDisplayFocused(false);\n  };\n\n  return (\n    <div className=\"display\">\n      <input\n        type=\"text\"\n        value={currDisplay}\n        className={isInvalidExpression ? 'invalid' : ''}\n        onChange={handleChange}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n      />\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { filterInput } from '../calculator';\n\nimport './button.styles.scss';\n\ninterface ButtonProps {\n  name: string;\n  value: string;\n  display: string;\n  handleClick: React.MouseEventHandler;\n}\n\nexport const Button = ({\n  name,\n  value,\n  display,\n  handleClick,\n  ...otherProps\n}: ButtonProps) => {\n  const [valid, setValid] = useState(true);\n\n  // For each button, ompare the current display with the display if button is pressed\n  // and validate that input to determine if the button is valid or invalid.\n  // Updates the classname/styling for each button\n  const validateButton = (buttonValue: string) => {\n    const nextPossibleDisplay = display + buttonValue;\n    const filteredNextPossibleDisplay = filterInput(nextPossibleDisplay);\n    const lastCharacter = display[display.length - 1];\n\n    // We can ignore the following buttons because they are always valid\n    if (['del', 'clear'].includes(buttonValue) || lastCharacter === '(') {\n      return;\n    }\n\n    // Validate the equals button based on the current display since\n    // it is not a value that is added to the input\n    if (buttonValue === '=') {\n      const filteredCurrentDisplay = filterInput(display);\n\n      if (Array.isArray(filteredCurrentDisplay)) {\n        setValid(true);\n      } else {\n        setValid(false);\n      }\n    }\n\n    // Handle all other buttons that enter characters into the display input\n    else if (!Array.isArray(filteredNextPossibleDisplay)) {\n      setValid(false);\n    } else {\n      setValid(true);\n    }\n  };\n\n  return (\n    <button\n      value={value}\n      className={valid ? 'button valid' : 'button invalid'}\n      onClick={handleClick}\n      onMouseEnter={() => validateButton(value)}\n      onMouseLeave={() => validateButton(value)}\n      {...otherProps}\n    >\n      {name}\n    </button>\n  );\n};\n","import { Button } from '../button/button.component';\n\nimport './controls.styles.scss';\n\ninterface ControlsProps {\n  display: string;\n  handleClick: React.MouseEventHandler;\n}\n\nexport const Controls = (props: ControlsProps) => {\n  const buttons = [\n    { name: '(', value: '(' },\n    { name: ')', value: ')' },\n    { name: '<-', value: 'del' },\n    { name: 'AC', value: 'clear' },\n    { name: '7', value: '7' },\n    { name: '8', value: '8' },\n    { name: '9', value: '9' },\n    { name: '/', value: '/' },\n    { name: '4', value: '4' },\n    { name: '5', value: '5' },\n    { name: '6', value: '6' },\n    { name: '*', value: '*' },\n    { name: '1', value: '1' },\n    { name: '2', value: '2' },\n    { name: '3', value: '3' },\n    { name: '-', value: '-' },\n    { name: '0', value: '0' },\n    { name: '.', value: '.' },\n    { name: '=', value: '=' },\n    { name: '+', value: '+' },\n  ];\n\n  return (\n    <div className=\"controls\">\n      <div className=\"buttons-container\">\n        {buttons.map(({ name, value }) => (\n          <Button key={name} name={name} value={value} {...props} />\n        ))}\n      </div>\n    </div>\n  );\n};\n","import { useState, useEffect, useCallback } from 'react';\n\nimport { filterInput, calculate } from './calculator';\nimport { checkValidInputValue } from './calculator.utils';\nimport { useErrorMessageContext } from '../../contexts/error-message.context';\n\nimport { Display } from './display/display.component';\nimport { Controls } from './controls/controls.component';\n\nimport './calculator.styles.scss';\n\ninterface CalculatorProps {\n  helpModalOpen: boolean;\n}\n\nexport const Calculator = ({ helpModalOpen }: CalculatorProps) => {\n  const [display, setDisplay] = useState('');\n  const [displayFocused, setDisplayFocused] = useState(false);\n  const { setIsInvalidExpression, setErrorMessage } = useErrorMessageContext();\n\n  // Running the calculate function in seperate function since it is used\n  // in both handleClick events and handleKeyDown events\n  const handleCalculate = useCallback(() => {\n    const result = calculate(display);\n\n    if (!display) {\n      return;\n    }\n\n    if (typeof result === 'string') {\n      setIsInvalidExpression(true);\n      setErrorMessage(result);\n    } else {\n      setDisplay(result.toString());\n    }\n  }, [display, setIsInvalidExpression, setErrorMessage]);\n\n  const handleClick = (event: React.BaseSyntheticEvent<MouseEvent>) => {\n    const buttonValue = event.target.value;\n\n    if (buttonValue === '=') {\n      handleCalculate();\n    } else if (buttonValue === 'clear') {\n      setDisplay('');\n    } else if (buttonValue === 'del') {\n      setDisplay(prevDisplay => prevDisplay.slice(0, prevDisplay.length - 1));\n    } else {\n      setDisplay(prevDisplay => prevDisplay + buttonValue);\n    }\n  };\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      const keyValue = event.key;\n\n      // Ignore handling key presses when the help modal is open.\n      if (helpModalOpen) {\n        return;\n      }\n\n      if (checkValidInputValue(keyValue) && !displayFocused) {\n        if (['=', 'Enter'].includes(keyValue)) {\n          handleCalculate();\n        } else if (keyValue === 'Escape') {\n          setDisplay('');\n        } else if (keyValue === 'Backspace') {\n          setDisplay(prevDisplay =>\n            prevDisplay.slice(0, prevDisplay.length - 1)\n          );\n        } else {\n          setDisplay(prevDisplay => prevDisplay + keyValue);\n        }\n      }\n\n      // Handle edge cases when the input is not focused\n      if (keyValue === 'Enter' && displayFocused) {\n        handleCalculate();\n      } else if (keyValue === 'Escape') {\n        setDisplay('');\n      }\n    },\n    [displayFocused, handleCalculate, helpModalOpen]\n  );\n\n  // Checking and validating display on every change in order to\n  // update error message and relevant styling\n  useEffect(() => {\n    const validatedDisplay = filterInput(display);\n\n    if (!display) {\n      setIsInvalidExpression(false);\n    }\n\n    if (typeof validatedDisplay === 'string') {\n      setIsInvalidExpression(true);\n      setErrorMessage(validatedDisplay);\n    } else {\n      setIsInvalidExpression(false);\n    }\n  }, [display, setDisplay, setIsInvalidExpression, setErrorMessage]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n\n  return (\n    <div className=\"calculator\">\n      <Display\n        currDisplay={display}\n        setDisplay={setDisplay}\n        setDisplayFocused={setDisplayFocused}\n      />\n      <Controls display={display} handleClick={handleClick} />\n    </div>\n  );\n};\n","export const checkValidInputValue = (keyButtonValue: string) => {\n  const controls = ['=', 'Enter', 'Escape', 'Backspace', 'Delete'];\n  const checkControls = controls.includes(keyButtonValue);\n  const checkParens = '()'.includes(keyButtonValue);\n  const checkOperators = '+-*/'.includes(keyButtonValue);\n  const checkNumbers =\n    (keyButtonValue >= '0' && keyButtonValue <= '9') || keyButtonValue === '.';\n\n  return checkNumbers || checkOperators || checkParens || checkControls;\n};\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"\n});\n\nfunction SvgErrorIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    height: \"24px\",\n    viewBox: \"0 0 24 24\",\n    width: \"24px\",\n    fill: \"#000000\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgErrorIcon);\nexport default __webpack_public_path__ + \"static/media/error-icon.e566894b.svg\";\nexport { ForwardRef as ReactComponent };","import { useErrorMessageContext } from '../../contexts/error-message.context';\n\nimport { ReactComponent as ErrorIcon } from '../../assets/error-icon.svg';\nimport './error-message.styles.scss';\n\nexport const ErrorMessage = () => {\n  const { errorMessage } = useErrorMessageContext();\n\n  return (\n    <div className=\"error-message\">\n      <ErrorIcon />\n      <span>{errorMessage}</span>\n    </div>\n  );\n};\n","import { SetStateAction, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport './help.styles.scss';\n\ninterface HelpProps {\n  isOpen: boolean;\n  setIsOpen: React.Dispatch<SetStateAction<boolean>>;\n}\n\nexport const Help = ({ isOpen, setIsOpen }: HelpProps) => {\n  const closeModal = (event: React.MouseEvent | KeyboardEvent) => {\n    event.preventDefault();\n    setIsOpen(false);\n  };\n\n  useEffect(() => {\n    if (isOpen) {\n      window.addEventListener('keydown', closeModal);\n    }\n\n    return () => {\n      window.removeEventListener('keydown', closeModal);\n    };\n  });\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return createPortal(\n    <div className=\"help-container\" onClick={closeModal}>\n      <div className=\"help\">\n        <h1>Help</h1>\n        <h3>Instructions:</h3>\n        <ol>\n          <li>\n            Use the buttons or your keyboard to type an expression\n            <ul>\n              <li>Press \"Backspace\" to delete the last character</li>\n              <li>Press \"Escape\" to clear the display</li>\n              <li>You can also copy/paste an expression into the display</li>\n            </ul>\n          </li>\n          <li>Type or press \"=\" or press enter to evaluate the expression</li>\n        </ol>\n        <h3>Valid Operations:</h3>\n        <ul>\n          <li>Addition: \"+\"</li>\n          <li>Subtraction: \"-\"</li>\n          <li>Multiplication: \"*\"</li>\n          <li>Division: \"/\"</li>\n        </ul>\n        <h3>General Syntax Rules:</h3>\n        <ul>\n          <li>Valid numbers include whole numbers and decimals</li>\n          <li>Input must be a valid mathematical expression</li>\n          <li>Must have an equal number of opening and closing parenthesis</li>\n          <li>\n            Only two operators in sequence where the second operator is a \"-\"\n          </li>\n        </ul>\n      </div>\n    </div>,\n    document.getElementById('modal')!\n  );\n};\n","import { useState } from 'react';\n\nimport { useErrorMessageContext } from './contexts/error-message.context';\n\nimport { Nav } from './components/nav/nav.component';\nimport { Calculator } from './components/calculator/calculator.component';\nimport { ErrorMessage } from './components/error-message/error-message.component';\nimport { Help } from './components/help/help.component';\n\nimport './App.scss';\n\nfunction App() {\n  const [helpModalOpen, setHelpModalOpen] = useState(false);\n  const { isInvalidExpression } = useErrorMessageContext();\n\n  return (\n    <div className=\"App\">\n      <Nav setHelpModalOpen={setHelpModalOpen} />\n      <Calculator helpModalOpen={helpModalOpen} />\n      {isInvalidExpression ? <ErrorMessage /> : null}\n      <Help isOpen={helpModalOpen} setIsOpen={setHelpModalOpen} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ErrorMessageContextProvider } from './contexts/error-message.context';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ErrorMessageContextProvider>\n      <App />\n    </ErrorMessageContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}